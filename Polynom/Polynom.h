
#pragma once 

#include "../DegreesPolynom/DegreesPolynom.h"

//класс многочлена
class Polynom : public DegreesPolynom
{
protected:

	//степень многочлена
	int _degree;

public:

	/*
	Конструктор по умолчанию
	Создает многочлен степени 0 с коэффициентом 0
	*/
	Polynom();

	/*
	Конструктор с параметрами
	Создает многочлен степени degree с коэффициентами coefficients
	args:
		degree - степень многочлена
		coefficients - коэффициенты многочлена
	Исключения:
		если встречен нулевой указатель
		если размер меньше или равен нулю
	*/
	Polynom(int degree, double* coefficients);

	/*
	Конструктор копирования
	создает копию входного многочлена
	args:
		polynom - копируемый объект
	*/
	Polynom(const Polynom& polynom);

	/*
	Оператор присваивания
	создает копию входного многочлена
	args:
		polynom - копируемый объект
	*/
	Polynom& operator=(const Polynom& obj);

	//деструктор не нужен, т.к. в этом подклассе нет новых полей с динамической памятью



	/*
	получение степени многочлена
	возвращает копию размера полинома
	return:
		копия значения _degree
	*/
	int getDegree();
	

	/*
	сеттер для степеней
	устанавливает многочлену размер size, степень size-1 (массив степеней игнорируется, т.к.
	степени должны идти по возрастанию - от 0 до size-1), и коэффициенты coefficients
	args:
		size - размер многочлена
		degrees - массив степеней
		coefficients - массив коэффициентов
	Исключения:
		если встречен нулевой указатель
		если размер меньше или равен нулю
	*/
	virtual void setDegrees(int size, int* degrees, double* coeff) override;

	/*
	Изменяет степень многочлена на degree
	при этом, изменяется и массив степеней
	args:
		degree - новая степень
	Исключения:
		если degree < 0
	*/
	virtual void setDegree(int degree);



	/*
	Оператор сложения
	args:
		obj - слагаемый полином
	return:
		полином - результат сложения многочленов
	*/
	Polynom operator+(const Polynom& polynom);

	/*
	Оператор вычитания
	args:
		obj - вычитаемый полином
	return:
		полином - результат вычитания многочленов
	*/
	Polynom operator-(const Polynom& polynom);



	/*
	оператор инкремента (префиксная форма)
	увеличивает степень многочлена на 1
	return:
		полином - результат увеличения степени на 1
	*/
	Polynom operator++();

	/*
	оператор инкремента (постфиксная форма)
	увеличивает степень многочлена на 1
	return:
		полином - копия многочлена до увеличения степени
	*/
	Polynom operator++(int);

	/*
	оператор декремента (префиксная форма)
	уменьшает степень многочлена на 1
	return:
		полином - результат уменьшения степени на 1
	*/
	Polynom operator--();

	/*
	оператор декремента (постфиксная форма)
	уменьшает степень многочлена на 1
	return:
		полином - копия многочлена до уменьшения степени
	*/
	Polynom operator--(int);



	/*
	Оператор чтения с обычного потока
	считывает многочлен с обычного потока
	args:
		stream - поток чтения
		polynom - считываемый многочлен
	return:
		ссылка на поток ввода
	Исключения:
		если размер меньше или равен нулю
	*/
	friend istream& operator>>(istream& stream, Polynom& polynom);

	/*
	Оператор чтения с файлового потока
	считывает многочлен с файлового потока
	args:
		stream - поток чтения
		polynom - считываемый многочлен
	return:
		ссылка на поток ввода
	Исключения:
		если размер меньше или равен нулю
	*/
	friend ifstream& operator>>(ifstream& stream, Polynom& polynom);

	/*
	чтения из бинарного файла
	args:
		file - бинарный файл
	Исключения:
		если file не открыт
		если размер меньше или равен нулю
	*/
	virtual void read(fstream& file);



	//функция вывода на экран - нужна для демонстрации полиморфизма
	virtual void show() override;

};
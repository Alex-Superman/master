#pragma once

#include "../DegreesPolynom/DegreesPolynom.h"

//Класс очереди
class Queue
{
private:

	//класс узла
	/*
	Класс сделан вложенным для того, чтобы оградить пользователя от 
	внутреннего механизма работы очереди. 
	Все члены класса сделаны открытыми для того, чтобы внутри списка
	можно было получать доступ к полям узла.
	Класс не имеет деструктора, т.к. хранит в себе указатели на объекты из
	внешнего кода (при их удалении могут возникнуть ошибки) и указатели на 
	соседние узлы (их удаление может сломать структуру списка).
	*/
	class Node
	{
		friend class Queue;
		
		friend ostream& operator<<(ostream& stream, Queue& queue);

		friend ofstream& operator<<(ofstream& stream, Queue& queue);

		//указатель на объект, хранящийся в узле
		//в узлах хранятся не сами объекты, а указатели на них из-за того, 
		//что при присваивании объекта-наследника объекту-родителю, объект-наследник приводится к типу родителя
		//и в таком случае не сработает динамический полиморфизм
		//были выбраны именно указатели, т.к. ссылки относятся к другому варианту задания
		DegreesPolynom* _data;

		//указатели на следующий и предыдущий элементы
		Node* _next, * _prev;

	public:

		//конструктор с параметром и по умолчанию
		Node(DegreesPolynom* polynom = nullptr);

	};

	//длина очереди
	int _length;

	//указатели на начало и конец списка (очереди)
	Node * _head, *_tail;

public:
	
	//конструктор по умолчанию
	Queue();

	//деструктор
	~Queue();

	//получение длины очереди
	//return:
	//	значение длины очереди
	int getLength();

	//добавление в конец очереди
	//args:
	//	polynom - указатель на вставляемый объект
	//исключения:
	//	если polynom - нулевой указатель
	void push(DegreesPolynom* polynom);

	//добавление по индексу
	//args:
	//	polynom - указатель на вставляемый объект
	//  index - индекс вставки
	//исключения:
	//	если polynom - нулевой указатель
	//	если index выходит за пределы очереди
	void push(DegreesPolynom* polynom, int index);

	//извлечение из начала очереди
	//return:
	//	первый элемент очереди
	//исключения:
	//	если очередь уже пуста
	DegreesPolynom* pop();

	//извлечение по индексу
	//return:
	//	элемент очереди под номером index
	//исключения:
	//	если очередь уже пуста
	//	если индекс выходит за пределы очереди
	DegreesPolynom* pop(int index);

	//очистка очереди
	void clear();

	//поиск по структуре
	//args:
	//	polynom - указатель на искомый объект
	//return:
	//	индекс, под которым находится объект polynom в очереди
	//исключения:
	//	если polynom - нулевой указатель
	int search(DegreesPolynom * polynom);
	


	//вывод на консоль
	//метод нужен для демонстрации динамического полиморфизма
	void show();

	//оператор вывода в поток
	//args:
	//	stream - ссылка на поток вывода
	//	queue - ссылка на выводимую очередь
	//return:
	//	ссылка на поток вывода
	friend ostream& operator<<(ostream& stream, Queue& queue);

	//оператор чтения из потока
	//args:
	//	stream - ссылка на поток чтения
	//	queue - ссылка на считываемую очередь
	//return:
	//	ссылка на поток ввода
	friend istream& operator>>(istream& stream, Queue& queue);

	//оператор вывода в поток
	//args:
	//	stream - ссылка на поток вывода
	//	queue - ссылка на выводимую очередь
	//return:
	//	ссылка на поток вывода
	friend ofstream& operator<<(ofstream& stream, Queue& queue);

	//оператор чтения из потока
	//args:
	//	stream - ссылка на поток чтения
	//	queue - ссылка на считываемую очередь
	//return:
	//	ссылка на поток ввода
	friend ifstream& operator>>(ifstream& stream, Queue& queue);

	//запись в бинарный файл
	//args:
	//	file - ссылка на бинарный файл
	void write(fstream& file);

	//чтение из бинарного файла
	//args:
	//	file - ссылка на бинарный файл
	void read(fstream& file);
};



#pragma once

#include <iostream>
#include <fstream>

using namespace std;

//класс многочлена с массивом коэффициентов
class DegreesPolynom
{
public:

	/*
	Конструктор по умолчанию
	создает многочлен нулевой степени с коэффицинтом ноль
	*/
	DegreesPolynom();

	/*
	Конструктор с параметрами
	создает многочлен размера size со степенями degrees и коэффициентами coefficients
	также, массив степеней сортируется по возрастанию
	args:
		size - размер многочлена
		degrees - массив степеней
		coeff - массив коэффициентов
	Исключения:
		если встречен нулевой указатель
		если размер меньше или равен нулю
		если массив степеней содержит отрицательные степени или совпадающие степени
	*/
	DegreesPolynom(int size, int * degrees, double* coefficients);

	/*
	Конструктор копирования
	создает копию входного многочлена
	args:
		polynom - копируемый объект
	*/
	DegreesPolynom(const DegreesPolynom& polynom);

	/*
	Оператор присваивания
	создает копию входного многочлена
	args:
		polynom - копируемый объект
	*/
	DegreesPolynom& operator=(const DegreesPolynom& polynom);

	//виртуальный деструктор - уничтожает "свою" часть объекта
	virtual ~DegreesPolynom();



	
	/*
	получение размера многочлена
	возвращает копию размера полинома
	return:
		копия значения _size
	*/
	int getSize();

	/*
	получение массива степеней многочлена
	return:
		копия массива _degrees
	*/
	int * getDegrees();

	/*
	Получение степени многочлена по индексу
	args:
		index - номер степени многочлена
	return:
		копия степени под номером index
	исключения:
		если индекс выходит за пределы многочлена
	*/
	int getDegree(int index);

	/*
	получение массива коэффициентов многочлена
	return:
		копия массива _coefficients
	*/
	double* getCoefficients();

	/*
	оператор индексирования
	возвращает ссылку на коэффициент под номером index
	args:
		index - номер коэффициента
	return:
		ссылка на коэффициент под номером index
	Исключения:
		если index выходит за пределы многочлена
	*/
	double& operator[](int index);



	/*
	сеттер для степеней
	устанавливает многочлену размер size, степени degrees и коэффициенты coefficients
	также, массив степеней сортируется по возрастанию
	args:
		size - размер многочлена
		degrees - массив степеней
		coefficients - массив коэффициентов
	Исключения:
		если встречен нулевой указатель
		если размер меньше или равен нулю
		если массив степеней содержит отрицательные степени или совпадающие степени
	*/
	virtual void setDegrees(int size, int* degrees, double* coefficients);

	/*
	сеттер для коэффициентов
	устанавливает многочлену коэффициенты coefficients
	args:
		coefficients - массив коэффициентов
	Исключения:
		если встречен нулевой указатель
	*/
	virtual void setCoefficients(double * coefficients);



	/*
	оператор для вычисления многочлена как функции
	возвращает значение многочлена от х
	args:
		x - значение переменной многочлена
	return:
		результат вычисления многочлена
	*/
	double operator()(double x);



	/*
	Оператор сложения
	args:
		polynom - слагаемый полином
	return:
		полином - результат сложения многочленов
	*/
	DegreesPolynom operator+(const DegreesPolynom& polynom);

	/*
	Оператор вычитания
	args:
		polynom - вычитаемый полином
	return:
		полином - результат вычитания многочленов
	*/
	DegreesPolynom operator-(const DegreesPolynom& polynom);



	/*
	Оператор вывода в обычный поток
	выводит многочлен в обычный поток
	args:
		stream - поток вывода
		polynom - выводимый многочлен
	return:
		ссылка на поток вывода
	*/
	friend ostream& operator<<(ostream& stream, const DegreesPolynom& polynom);

	/*
	Оператор вывода в файловый поток
	выводит многочлен в файловый поток
	args:
		stream - поток вывода
		polynom - выводимый многочлен
	return:
		ссылка на поток вывода
	*/
	friend ofstream& operator<<(ofstream& stream, const DegreesPolynom& polynom);

	/*
	Оператор чтения с обычного потока
	считывает многочлен с обычного потока
	args:
		stream - поток чтения
		polynom - считываемый многочлен
	return:
		ссылка на поток ввода
	Исключения:
		если размер меньше или равен нулю
		если массив степеней содержит отрицательные степени или совпадающие степени
	*/
	friend istream& operator>>(istream& stream, DegreesPolynom& polynom);

	/*
	Оператор чтения с файлового потока
	считывает многочлен с файлового потока
	args:
		stream - поток чтения
		polynom - считываемый многочлен
	return:
		ссылка на поток ввода
	Исключения:
		если размер меньше или равен нулю
		если массив степеней содержит отрицательные степени или совпадающие степени
	*/
	friend ifstream& operator>>(ifstream& stream, DegreesPolynom& polynom);

	/*
	Запись в бинарный файл
	args:
		file - бинарный файл
	Исключения:
		если file не открыт
	*/
	void write(fstream& file);

	/*
	чтения из бинарного файла
	args:
		file - бинарный файл
	Исключения:
		если file не открыт
		если размер меньше или равен нулю
		если массив степеней содержит отрицательные степени или совпадающие степени
	*/
	virtual void read(fstream& file);

protected:

	//количество элементов многочлена
	int _size;

	//массив степеней
	int* _degrees;

	//массив коэффициентов
	double* _coefficients;

	/*
	проверить, может ли массив быть массивом коэффициентов
	Проверяет, чтобы в массиве не было одинаковых коэффициентов
	и чтобы не было отрицательных коэффициентов
	args:
		size - размер массива
		degrees - массив степеней
	return - true - если degrees может быть массивом коэффициентов
			 false - если degrees не может быть массивом коэффициентов
	*/
	bool isArrayOfDegrees(int size, int* degrees);

	/*
	сортировка массива степеней вместе с массивом коэффициентов
	производит сортировку выбором, при этом, при обмене значений степеней
	происходит обмен соответствующих коэффициентов
	метод необходим для того, чтобы степени в массиве были расположены по возрастанию
	args:
		size - размер массива
		degrees - массив степеней
		coeff - массив коэффициентов
	*/
	void sort(int size, int* degrees, double* coefficients);

};